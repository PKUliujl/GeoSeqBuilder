# -*- coding: utf-8 -*-

###################################################################################
#### This code is a part from OPUS-Rota4, https://doi.org/10.1093/bib/bbab529.  ###
#### If you find use, please cite it.                                           ###
###################################################################################
"""
Created on Wed Apr 27 13:27:07 2022

@author: liujl
"""

import numpy as np    
from geoseqbuilder.builder.myclass import Atoms, Residues
import datetime


def readPDB(filename, chainID, purpose=None):
    f = open(filename,'r')
    atomsDatas = []
    for line in f.readlines():
        line = line.strip()
        if (line == "" or line[:3] == "END"):
            break
        else:
            if line[:4] == 'ATOM' and line[21] in chainID:
                atomid = line[6:11].strip()
                name1 = line[11:16].strip()
                if purpose=='Val':
                    resname='VAL'
                elif purpose=='Ile':
                    resname='ILE'
                else:
                    resname = line[16:20].strip()
                reschain = line[21:22].strip()

                #B confomation
                if(len(resname) == 4 and resname[0] != "A"):
                    continue

                resid = line[22:27].strip()

                x = line[30:38].strip()
                y = line[38:46].strip()
                z = line[46:54].strip()

                if(name1[0] in ["N","O","C","S"]):
                    position = np.array([float(x), float(y), float(z)], dtype=np.float32)
                    atom = Atoms.Atom(atomid, name1, resname, reschain, resid, position)
                    atomsDatas.append(atom)
    f.close()
    return atomsDatas



def outputPDB(residuesData, atoms_matrix, atoms_matrix_name, pdb_path):
    
    atom_id = 1
    counter = 0
    f = open(pdb_path, 'w')
    f.write( 'HEADER    THEORETICAL MODEL %s\n'%datetime.datetime.now())
    f.write( 'REMARK    Model generated by *****PKUMDL***** \n' )
    for residue, atom_names in zip(residuesData, atoms_matrix_name):
        for idx, name1 in enumerate(atom_names):
            if residue.resname == "G" and name1 == "CB": 
                counter += 1
                continue
            atom_id2 = atom_id + idx
            string = 'ATOM  '
            id_len = len(list(str(atom_id2)))
            string = string + " "*(5-id_len) + str(atom_id2)
            string = string + " "*2
            name1_len = len(list(name1))
            string = string + name1 + " "*(3-name1_len)
            resname = Residues.triResname(residue.resname)
            resname_len = len(list(resname))
            string = string + " "*(4-resname_len) + resname
            string = string + " "
            chain = str(residue.chain1)
            string = string + chain
            resid = str(residue.resid)
            resid_len = len(list(resid))
            string = string + " "*(4-resid_len) + str(resid)
            string = string + " "*4
            x = format(atoms_matrix[counter][0],".3f")
            x_len = len(list(x))
            string = string + " "*(8-x_len) + x
            y = format(atoms_matrix[counter][1],".3f")
            y_len = len(list(y))
            string = string + " "*(8-y_len) + y
            z = format(atoms_matrix[counter][2],".3f")        
            z_len = len(list(z))
            string = string + " "*(8-z_len) + z  
            string += ' '*2+'1.00'+' '*(6-len('90.00'))  + '90.00'#format('0.00')            
            f.write(string)
            f.write("\n")
            
            counter += 1
        
        atom_id += residue.num_atoms
        
    assert len(atoms_matrix) == counter
    f.close()
